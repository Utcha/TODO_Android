
kdongeun@D1WSPDX1 MINGW64 ~
$ git
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

kdongeun@D1WSPDX1 MINGW64 ~
$ pwd
/m/

kdongeun@D1WSPDX1 MINGW64 ~
$ cd c
bash: cd: c: No such file or directory

kdongeun@D1WSPDX1 MINGW64 ~
$ cd c:

kdongeun@D1WSPDX1 MINGW64 /c
$ pwd
/c

kdongeun@D1WSPDX1 MINGW64 /c
$ cd kdongeun_project

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ cd..
bash: cd..: command not found

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ cd ..

kdongeun@D1WSPDX1 MINGW64 /c
$ cd

kdongeun@D1WSPDX1 MINGW64 /m
$ cd c:

kdongeun@D1WSPDX1 MINGW64 /c
$ cd kdongeun_project

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ git
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ git init
Initialized empty Git repository in C:/kdongeun_project/.git/

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project (master)
$ ls -al
total 68
drwxr-xr-x 1 kdongeun 1049089 0 Nov 29 15:49 ./
drwxr-xr-x 1 kdongeun 1049089 0 Nov 29 15:46 ../
drwxr-xr-x 1 kdongeun 1049089 0 Nov 29 15:49 .git/

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project (master)
$ del .git
bash: del: command not found

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project (master)
$ mkdir TODO_Android

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ ls
TODO_Android/

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ ls -al
total 64
drwxr-xr-x 1 kdongeun 1049089 0 Nov 29 16:00 ./
drwxr-xr-x 1 kdongeun 1049089 0 Nov 29 15:46 ../
drwxr-xr-x 1 kdongeun 1049089 0 Nov 29 16:00 TODO_Android/

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project
$ cd TODO_Android

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android
$ git init
Initialized empty Git repository in C:/kdongeun_project/TODO_Android/.git/

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ touch Readme.txt

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        Readme.txt

nothing added to commit but untracked files present (use "git add" to track)

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git add Readme.txt

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit -m "Add Readme.txt"
[master (root-commit) 601d29c] Add Readme.txt
 Committer: Dongeun Kim <kdongeun@UnitedMerchant.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 Readme.txt

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git remote add origin https://github.com/Utcha/TODO_Android.git

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git remote -v
origin  https://github.com/Utcha/TODO_Android.git (fetch)
origin  https://github.com/Utcha/TODO_Android.git (push)

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master


kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git remote add origin https://github.com/Utcha/TODO_Android.git
fatal: remote origin already exists.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git push -u origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 226 bytes | 226.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/Utcha/TODO_Android.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git add docs

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git push -u origin master
Everything up-to-date
Branch 'master' set up to track remote branch 'master' from 'origin'.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git add *

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit
Aborting commit due to empty commit message.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit -m "folder test"
[master 6e5aa9e] folder test
 Committer: Dongeun Kim <kdongeun@UnitedMerchant.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 2 files changed, 4 insertions(+)
 create mode 100644 docs/Basic_concept.txt
 create mode 100644 docs/Help List.txt

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git push -u origin master
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 425 bytes | 425.00 KiB/s, done.
Total 4 (delta 0), reused 0 (delta 0)
To https://github.com/Utcha/TODO_Android.git
   601d29c..6e5aa9e  master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit -m "delete test"
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
        deleted:    docs/Basic_concept.txt
        deleted:    docs/Help List.txt

no changes added to commit

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git push -u origin master
Everything up-to-date
Branch 'master' set up to track remote branch 'master' from 'origin'.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git pull
Already up to date.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git pull
Already up to date.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git add *

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit -m "delete test"
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
        deleted:    docs/Basic_concept.txt
        deleted:    docs/Help List.txt

no changes added to commit

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    docs/Basic_concept.txt
        deleted:    docs/Help List.txt

no changes added to commit (use "git add" and/or "git commit -a")

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit -a
Aborting commit due to empty commit message.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git rm
usage: git rm [<options>] [--] <file>...

    -n, --dry-run         dry run
    -q, --quiet           do not list removed files
    --cached              only remove from the index
    -f, --force           override the up-to-date check
    -r                    allow recursive removal
    --ignore-unmatch      exit with a zero status even if nothing matched


kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    docs/Basic_concept.txt
        deleted:    docs/Help List.txt

no changes added to commit (use "git add" and/or "git commit -a")

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ rm grit.gemspec
rm: cannot remove 'grit.gemspec': No such file or directory

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ rm docs
rm: cannot remove 'docs': No such file or directory

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git rm docs
fatal: not removing 'docs' recursively without -r

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git rm -r docs
rm 'docs/Basic_concept.txt'
rm 'docs/Help List.txt'

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    docs/Basic_concept.txt
        deleted:    docs/Help List.txt


kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git commit -m "delete test"
[master b37b3b3] delete test
 Committer: Dongeun Kim <kdongeun@UnitedMerchant.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 2 files changed, 4 deletions(-)
 delete mode 100644 docs/Basic_concept.txt
 delete mode 100644 docs/Help List.txt

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git push
Counting objects: 2, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (1/1), done.
Writing objects: 100% (2/2), 239 bytes | 239.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0)
To https://github.com/Utcha/TODO_Android.git
   6e5aa9e..b37b3b3  master -> master

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ git help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$ ^C

kdongeun@D1WSPDX1 MINGW64 /c/kdongeun_project/TODO_Android (master)
$
